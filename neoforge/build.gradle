plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            data()
                programArgs "--all", "--mod", "eternalsdelight"
            programArgs "--output", project(':common').file('src/generated/resources').absolutePath
            programArgs "--existing", project(':common').file('src/main/resources').absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url "https://maven.ryanliptak.com/"
    }
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    implementation "curse.maven:farmersdelight-398521:5566383"
    implementation "curse.maven:eternalstarlight-1080592:5664712"

    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-1.21-common-api:19.8.2.99")
    compileOnly("mezz.jei:jei-1.21-neoforge-api:19.8.2.99")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-1.21-neoforge:19.8.2.99")

    compileOnly "squeek.appleskin:appleskin-neoforge:mc1.21-3.0.4:api"
    runtimeOnly "squeek.appleskin:appleskin-neoforge:mc1.21-3.0.4"


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    atAccessWideners.add('eternalsdelight.accesswidener')
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}