plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name = "Greenhouse Maven"
        url = 'https://repo.greenhouse.house/releases/'
    }
//  maven { url "https://mvn.devos.one/releases/" } // Porting Lib
    maven {
        name = "Greenhouse Maven (Snapshots)" // Temporary Porting Lib Fork for 1.21
        url = 'https://repo.greenhouse.house/snapshots/'
    }
    maven {
        url "https://jitpack.io/" // Fabric ASM
        content {
            excludeGroup "io.github.fabricators_of_create"
        }
    }
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // modImplementation "com.github.Chocohead:Fabric-ASM:${rootProject.fabric_asm_version}"
    // include "com.github.Chocohead:Fabric-ASM:${rootProject.fabric_asm_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    // compile against the JEI API but do not include it at runtime
//    modCompileOnlyApi("mezz.jei:jei-1.21-common-api:19.8.2.99")
//    modCompileOnlyApi("mezz.jei:jei-1.21-fabric-api:19.8.2.99")
    // at runtime, use the full JEI jar for Fabric
//    modRuntimeOnly("mezz.jei:jei-1.21-fabric:19.8.2.99")

//    compileOnly "squeek.appleskin:appleskin-fabric:mc1.21-3.0.5:api"
//    runtimeOnly "squeek.appleskin:appleskin-fabric:mc1.21-3.0.5"

    modImplementation("vectorwing:FarmersDelight:${fdrf}+refabricated") {
        exclude(group: "net.fabricmc")
    }

    modImplementation "maven.modrinth:eternal-starlight:$starlight+fabric"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}